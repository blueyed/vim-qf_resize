Before:
  tabnew
  Save g:qf_resize_in_test
  let g:qf_resize_in_test = 1

After:
  Restore
  tabclose

Execute (Uses max 10):
  Save &lines
  let &lines = 100
  Assert exists('#qf_resize')
  laddexpr ['1','2','3','4','5','6','7','8','9','10','11','12']
  TestLopen
  AssertEqual winheight(2), 10

Execute (Uses min 1):
  let &lines = 10
  laddexpr ['1','2','3','4','5','6','7','8','9','10','11','12']
  TestLopen
  AssertEqual winheight(2), 1

Execute (Uses g:qf_resize_min_height):
  Save g:qf_resize_min_height
  let g:qf_resize_min_height = 2
  let &lines = 10
  laddexpr ['1','2','3','4','5','6','7','8','9','10','11','12']
  TestLopen
  AssertEqual winheight(2), 2

Execute (equalalways: 100 lines, ):
  Save &equalalways
  set equalalways
  let &lines = 100
  new
  laddexpr ['1','2','3','4','5','6','7','8','9','10','11','12']
  3wincmd _
  AssertEqual [89, 3], map(range(1, winnr('$')), 'winheight(v:val)')
  noautocmd TestLopen
  " Height of win 1 and 2 is different on vim73 (Travis).
  AssertEqual winheight(3), 10

  noautocmd lclose
  AssertEqual [46, 46], map(range(1, winnr('$')), 'winheight(v:val)')
  TestLopen
  AssertEqual [46, 38, 7], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (noequalalways: noautocmd):
  Save &equalalways
  set noequalalways
  let &lines = 100
  new
  laddexpr ['1','2','3','4','5','6','7','8','9','10','11','12']
  3wincmd _
  AssertEqual winheight(1), 89
  AssertEqual winheight(2), 3
  noautocmd TestLopen
  AssertEqual [80, 1, 10], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (noequalalways: autocmd):
  Save &equalalways
  set noequalalways
  let &lines = 100
  new
  laddexpr ['1','2','3','4','5','6','7','8','9','10','11','12']

  10wincmd _
  AssertEqual [82, 10], map(range(1, winnr('$')), 'winheight(v:val)')
  TestLopen
  AssertEqual [82, 7, 2], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (noequalalways: 2 windows, 89/3 lines, 12 items):
  Save &equalalways
  set noequalalways
  let &lines = 100

  laddexpr ['1','2','3','4','5','6','7','8','9','10','11','12']
  new
  3wincmd _

  AssertEqual [89, 3], map(range(1, winnr('$')), 'winheight(v:val)')
  TestLopen
  AssertEqual [89, 1, 1], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (noequalalways: 2 windows, 72/20 lines, 12 items in 2nd window):
  Save &equalalways
  set noequalalways
  let &lines = 100

  new
  laddexpr ['1','2','3','4','5','6','7','8','9','10','11','12']
  20wincmd _

  AssertEqual [72, 20], map(range(1, winnr('$')), 'winheight(v:val)')
  TestLopen
  AssertEqual [72, 16, 3], map(range(1, winnr('$')), 'winheight(v:val)')

  lgetexpr ['1']
  if has('patch-8.0.0677') | call feedkeys('', 'x') | endif
  AssertEqual [72, 18, 1], map(range(1, winnr('$')), 'winheight(v:val)')
  lclose
  AssertEqual [72, 20], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (noequalalways: 2 windows, 72/20 lines, 12 items in 1st window):
  Save &equalalways
  set noequalalways
  let &lines = 100

  laddexpr ['1','2','3','4','5','6','7','8','9','10','11','12']
  new
  20wincmd _
  1wincmd w

  AssertEqual [72, 20], map(range(1, winnr('$')), 'winheight(v:val)')
  TestLopen
  AssertEqual [61, 10, 20], map(range(1, winnr('$')), 'winheight(v:val)')

  lgetexpr ['1']
  if has('patch-8.0.0677') | call feedkeys('', 'x') | endif
  AssertEqual [70, 1, 20], map(range(1, winnr('$')), 'winheight(v:val)')
  lclose
  AssertEqual [72, 20], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (noequalalways: 2 windows, 72/20 lines, 1 item in 1st window):
  Save &equalalways
  set noequalalways
  let &lines = 100

  new
  20wincmd _
  1wincmd w
  lgetexpr ['1']

  AssertEqual [72, 20], map(range(1, winnr('$')), 'winheight(v:val)')
  TestLopen
  AssertEqual [70, 1, 20], map(range(1, winnr('$')), 'winheight(v:val)')

  lclose
  AssertEqual [72, 20], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (lopen with noautocmd and :QfResizeWindows):
  Save &equalalways
  set noequalalways
  let &lines = 100

  new
  20wincmd _
  1wincmd w
  lgetexpr ['1']

  AssertEqual [72, 20], map(range(1, winnr('$')), 'winheight(v:val)')
  exe 'source' fnamemodify(g:vader_file, ':h:h').'/plugin/qf_resize.vim'
  noautocmd TestLopen
  QfResizeWindows
  AssertEqual [70, 1, 20], map(range(1, winnr('$')), 'winheight(v:val)')

  lclose
  AssertEqual [72, 20], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (qf_resize#get_maxheight):
  AssertEqual qf_resize#get_maxheight(5), 1
  AssertEqual qf_resize#get_maxheight(14), 2
  AssertEqual qf_resize#get_maxheight(21), 3
  AssertEqual qf_resize#get_maxheight(52), 8

  Save g:qf_resize_max_ratio
  let g:qf_resize_max_ratio = 0.5
  AssertEqual qf_resize#get_maxheight(12), 6
  AssertEqual qf_resize#get_maxheight(13), 7
  AssertEqual qf_resize#get_maxheight(14), 7
  AssertEqual qf_resize#get_maxheight(21), 11
  AssertEqual qf_resize#get_maxheight(52), 26
  AssertEqual qf_resize#get_maxheight(53), 27

Execute (qf without window above, quit from outside):
  Save &equalalways
  set noequalalways
  let &lines = 100

  TestCopen
  AssertEqual [91, 1], map(range(1, winnr('$')), 'winheight(v:val)')
  wincmd p
  vsplit
  lgetexpr '1'
  TestLopen

  AssertEqual [89, 1, 91, 1], map(range(1, winnr('$')), 'winheight(v:val)')

  1wincmd q
  AssertEqual [91, 91, 1], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (qf without window above, quit from within):
  Save &equalalways
  set noequalalways
  let &lines = 100

  TestCopen
  AssertEqual [91, 1], map(range(1, winnr('$')), 'winheight(v:val)')
  wincmd p
  vsplit
  lgetexpr '1'
  TestLopen

  AssertEqual [89, 1, 91, 1], map(range(1, winnr('$')), 'winheight(v:val)')

  1wincmd w
  quit
  AssertEqual [91, 91, 1], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (normal, loclist, qf):
  Save &equalalways
  set noequalalways
  let &lines = 100

  lgetexpr '1'
  TestLopen
  AssertEqual [91, 1], map(range(1, winnr('$')), 'winheight(v:val)')

  resize 10
  AssertEqual [82, 10], map(range(1, winnr('$')), 'winheight(v:val)')

  TestCopen
  AssertEqual [89, 1, 1], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (normal, fixed, loclist):
  Save &equalalways
  set noequalalways
  let &lines = 100

  new
  set winfixheight
  AssertEqual [46, 46], map(range(1, winnr('$')), 'winheight(v:val)')

  lgetexpr '1'
  TestLopen
  AssertEqual [44, 46, 1], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (normal, fixed, loclist):
  Save &equalalways
  set noequalalways
  let &lines = 100

  laddexpr 'loc1'
  TestLopen
  AssertEqual [91, 1], map(range(1, winnr('$')), 'winheight(v:val)')
  wincmd p
  vsp
  AssertEqual [91, 91, 1], map(range(1, winnr('$')), 'winheight(v:val)')
  lgetexpr 'loc2'
  TestLopen
  AssertEqual [89, 1, 91, 1], map(range(1, winnr('$')), 'winheight(v:val)')

  cgetexpr 'qf1'
  AssertThrows TestCopen
  AssertEqual g:vader_exception, 'Vim(copen):E36: Not enough room'
  AssertEqual [89, 1, 91, 1], map(range(1, winnr('$')), 'winheight(v:val)')

  set equalalways
  noautocmd TestCopen
  AssertEqual [['', 58], ['qf', 21], ['', 80], ['qf', 1], ['qf', 10]], map(range(1, winnr('$')), '[getwinvar(v:val, "&ft"), winheight(v:val)]')
  TestCopen

  AssertEqual [['', 87], ['qf', 1], ['', 89], ['qf', 1], ['qf', 1]], map(range(1, winnr('$')), '[getwinvar(v:val, "&ft"), winheight(v:val)]')
