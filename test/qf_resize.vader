Before:
  tabnew

After:
  Restore
  tabclose

Execute (Uses max 10):
  Save &lines
  let &lines = 100
  Assert exists('#qf_resize')
  laddexpr ['1','2','3','4','5','6','7','8','9','10','11','12']
  lopen
  AssertEqual winheight(2), 10

Execute (Uses min 1):
  let &lines = 10
  laddexpr ['1','2','3','4','5','6','7','8','9','10','11','12']
  lopen
  AssertEqual winheight(2), 1

Execute (Uses g:qf_resize_min_height):
  Save g:qf_resize_min_height
  let g:qf_resize_min_height = 2
  let &lines = 10
  laddexpr ['1','2','3','4','5','6','7','8','9','10','11','12']
  lopen
  AssertEqual winheight(2), 2

Execute (equalalways: 100 lines, ):
  Save &equalalways
  set equalalways
  let &lines = 100
  new
  laddexpr ['1','2','3','4','5','6','7','8','9','10','11','12']
  3wincmd _
  AssertEqual winheight(1), 89
  AssertEqual winheight(2), 3
  noautocmd lopen
  AssertEqual [30, 51, 10], map(range(1, winnr('$')), 'winheight(v:val)')

  noautocmd lclose
  AssertEqual [46, 46], map(range(1, winnr('$')), 'winheight(v:val)')
  lopen
  AssertEqual [46, 39, 6], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (noequalalways: noautocmd):
  Save &equalalways
  set noequalalways
  let &lines = 100
  new
  laddexpr ['1','2','3','4','5','6','7','8','9','10','11','12']
  3wincmd _
  AssertEqual winheight(1), 89
  AssertEqual winheight(2), 3
  noautocmd lopen
  AssertEqual [80, 1, 10], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (noequalalways: autocmd):
  Save &equalalways
  set noequalalways
  let &lines = 100
  new
  laddexpr ['1','2','3','4','5','6','7','8','9','10','11','12']

  10wincmd _
  AssertEqual [82, 10], map(range(1, winnr('$')), 'winheight(v:val)')
  lopen
  AssertEqual [82, 8, 1], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (noequalalways: 2 windows, 89/3 lines, 12 items):
  Save &equalalways
  set noequalalways
  let &lines = 100

  laddexpr ['1','2','3','4','5','6','7','8','9','10','11','12']
  new
  3wincmd _

  AssertEqual [89, 3], map(range(1, winnr('$')), 'winheight(v:val)')
  lopen
  AssertEqual [89, 1, 1], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (noequalalways: 2 windows, 72/20 lines, 12 items in 2nd window):
  Save &equalalways
  set noequalalways
  let &lines = 100

  new
  laddexpr ['1','2','3','4','5','6','7','8','9','10','11','12']
  20wincmd _

  AssertEqual [72, 20], map(range(1, winnr('$')), 'winheight(v:val)')
  lopen
  AssertEqual [72, 17, 2], map(range(1, winnr('$')), 'winheight(v:val)')

  lgetexpr ['1']
  AssertEqual [72, 18, 1], map(range(1, winnr('$')), 'winheight(v:val)')
  lclose
  AssertEqual [72, 20], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (noequalalways: 2 windows, 72/20 lines, 12 items in 1st window):
  Save &equalalways
  set noequalalways
  let &lines = 100

  laddexpr ['1','2','3','4','5','6','7','8','9','10','11','12']
  new
  20wincmd _
  1wincmd w

  AssertEqual [72, 20], map(range(1, winnr('$')), 'winheight(v:val)')
  lopen
  AssertEqual [61, 10, 20], map(range(1, winnr('$')), 'winheight(v:val)')

  lgetexpr ['1']
  AssertEqual [70, 1, 20], map(range(1, winnr('$')), 'winheight(v:val)')
  lclose
  AssertEqual [72, 20], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (noequalalways: 2 windows, 72/20 lines, 1 item in 1st window):
  Save &equalalways
  set noequalalways
  let &lines = 100

  new
  20wincmd _
  1wincmd w
  lgetexpr ['1']

  AssertEqual [72, 20], map(range(1, winnr('$')), 'winheight(v:val)')
  lopen
  AssertEqual [70, 1, 20], map(range(1, winnr('$')), 'winheight(v:val)')

  lclose
  AssertEqual [72, 20], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (lopen with noautocmd and :QfResizeWindows):
  Save &equalalways
  set noequalalways
  let &lines = 100

  new
  20wincmd _
  1wincmd w
  lgetexpr ['1']

  AssertEqual [72, 20], map(range(1, winnr('$')), 'winheight(v:val)')
  exe 'source' fnamemodify(g:vader_file, ':h:h').'/plugin/qf_resize.vim'
  noautocmd lopen
  QfResizeWindows
  AssertEqual [70, 1, 20], map(range(1, winnr('$')), 'winheight(v:val)')

  lclose
  AssertEqual [72, 20], map(range(1, winnr('$')), 'winheight(v:val)')

Execute (qf_resize#get_maxheight):
  AssertEqual qf_resize#get_maxheight(10, 3), 1
  AssertEqual qf_resize#get_maxheight(10, 10), 3
  AssertEqual qf_resize#get_maxheight(50, 1), 7

  Save g:qf_resize_max_ratio
  let g:qf_resize_max_ratio = 0.5
  AssertEqual qf_resize#get_maxheight(10, 3), 6
  AssertEqual qf_resize#get_maxheight(10, 10), 10
  AssertEqual qf_resize#get_maxheight(50, 1), 25
  AssertEqual qf_resize#get_maxheight(50, 2), 26
